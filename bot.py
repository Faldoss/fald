from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
from database import add_user, has_access

API_TOKEN = '8094739628:AAGrUMXNUfwe0iYb-Tk8GGA2azEacLdvMDA'
ADMIN_ID = 847794446
PRIVATE_LINK = "https://t.me/+bjzQ1cK3weQ1Njgy"

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –°–ª–æ–≤–Ω–∏–∫: user_id -> –º–æ–≤–∞ ('ua' –∞–±–æ 'en')
user_languages = {}

@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    markup = InlineKeyboardMarkup().add(
        InlineKeyboardButton("–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞", callback_data="lang_ua"),
        InlineKeyboardButton("English", callback_data="lang_en")
    )
    await message.answer("üëãHi! This is a bot from @valeramiami for joining my paid channel. Here, I share my experience, useful tips, and calls. If you're my axiom referral (1+ sol volume), dm me after your purchase, and I‚Äôll refund you 0.08 sol.\n\n""üëã–ü—Ä–∏–≤—ñ—Ç! –¶–µ –±–æ—Ç –≤—ñ–¥ @valeramiami –¥–ª—è –≤—Å—Ç—É–ø—É –¥–æ –º–æ–≥–æ –ø–ª–∞—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª—É. –¢—É—Ç —è –¥—ñ–ª—é—Å—è —Å–≤–æ—ó–º –¥–æ—Å–≤—ñ–¥–æ–º, –∫–æ—Ä–∏—Å–Ω–∏–º–∏ —Ñ—ñ—à–∫–∞–º–∏ —Ç–∞ –∫–æ–ª–ª–∞–º–∏. –Ø–∫—â–æ —Ç–∏ –º—ñ–π –∞xiom —Ä–µ—Ñ–µ—Ä–∞–ª (–≤–æ–ª—å—é–º 1 sol+), –ø—ñ—Å–ª—è –ø–æ–∫—É–ø–∫–∏ –Ω–∞–ø–∏—à–∏ –º–µ–Ω—ñ –≤ –æ—Å–æ–±–∏—Å—Ç—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —ñ —è –ø–æ–≤–µ—Ä–Ω—É —Ç–æ–±—ñ 0.08 sol. \n\nChoose your language:\n–û–±–µ—Ä—ñ—Ç—å –≤–∞—à—É –º–æ–≤—É:", reply_markup=markup)

@dp.callback_query_handler(lambda c: c.data in ['lang_ua', 'lang_en'])
async def process_language(callback_query: types.CallbackQuery):
    lang = 'ua' if callback_query.data == 'lang_ua' else 'en'
    user_languages[callback_query.from_user.id] = lang

    if lang == 'ua':
        text = (
            "üí∏ –©–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ—Å—Ç—É–ø, —Å–∫–∏–Ω—å—Ç–µ 0.33 SOL –Ω–∞ –∞–¥—Ä–µ—Å—É:\n"
            "`HmYkEoTBcPw5jfesNA2FFNwdt7465TsRbuoJpkQwoCRk`\n\n"
            "–ü—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏."
        )
        check_button = InlineKeyboardMarkup().add(InlineKeyboardButton("üîç –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –æ–ø–ª–∞—Ç—É", callback_data="check_ua"))
    else:
        text = (
            "üí∏ To get access, send 0.33 SOL to the address:\n"
            "`HmYkEoTBcPw5jfesNA2FFNwdt7465TsRbuoJpkQwoCRk`\n\n"
            "After payment, click the button below to check."
        )
        check_button = InlineKeyboardMarkup().add(InlineKeyboardButton("üîç Check Payment", callback_data="check_en"))

    await bot.send_message(callback_query.from_user.id, text, reply_markup=check_button, parse_mode='Markdown')
    await callback_query.answer()

# –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –æ–ø–ª–∞—Ç—É"
@dp.callback_query_handler(lambda c: c.data in ['check_ua', 'check_en'])
async def fake_check(callback_query: types.CallbackQuery):
    user = callback_query.from_user
    lang = 'ua' if callback_query.data == 'check_ua' else 'en'

    if lang == 'ua':
        msg = "‚è≥ –ó–∞—á–µ–∫–∞–π—Ç–µ, –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –æ–ø–ª–∞—Ç—É...\n""–¶–µ –∑–∞–π–º–µ –Ω–µ –±—ñ–ª—å—à–µ 30 —Ö–≤–∏–ª–∏–Ω"
        waiting_button = "‚è≥ –û—á—ñ–∫—É–π—Ç–µ..."
    else:
        msg = "‚è≥ Please wait, checking payment...\n""It will take no more than 30 minutes"
        waiting_button = "‚è≥ Please wait..."

    # –í—ñ–¥–ø–æ–≤—ñ–¥—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
    await bot.send_message(user.id, msg)

    # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω–∞ –∑ –∫–Ω–æ–ø–∫–æ—é
    text_for_admin = f"üîî –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á @{user.username or '–±–µ–∑ —é–∑–µ—Ä–Ω–µ–π–º—É'} (ID: {user.id}) –Ω–∞—Ç–∏—Å–Ω—É–≤ '–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –æ–ø–ª–∞—Ç—É'"
    allow_markup = InlineKeyboardMarkup().add(
        InlineKeyboardButton("‚úÖ –î–∞—Ç–∏ –¥–æ—Å—Ç—É–ø", callback_data=f"give_access:{user.id}")
    )
    await bot.send_message(ADMIN_ID, text_for_admin, reply_markup=allow_markup)

    # –ó–∞–º—ñ–Ω—é—î–º–æ –∫–Ω–æ–ø–∫—É –Ω–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—É –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—é –º–æ–≤–æ—é
    new_markup = InlineKeyboardMarkup().add(
        InlineKeyboardButton(waiting_button, callback_data="none")
    )
    try:
        await bot.edit_message_reply_markup(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            reply_markup=new_markup
        )
    except Exception as e:
        print(f"[edit_button_error] {e}")

    await callback_query.answer()

# –û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∞–¥–º—ñ–Ω–æ–º "–î–∞—Ç–∏ –¥–æ—Å—Ç—É–ø"
@dp.callback_query_handler(lambda c: c.data.startswith("give_access:"))
async def give_access(callback_query: types.CallbackQuery):
    if callback_query.from_user.id != ADMIN_ID:
        await callback_query.answer("‚õî –¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω –º–æ–∂–µ –¥–∞–≤–∞—Ç–∏ –¥–æ—Å—Ç—É–ø!", show_alert=True)
        return

    from database import add_user, has_access

    user_id = int(callback_query.data.split(":")[1])
    lang = user_languages.get(user_id, 'ua')  # —è–∫—â–æ –º–æ–≤–∞ –Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–∞ ‚Äî –±—É–¥–µ 'ua'
    user = await bot.get_chat(user_id)

    if has_access(user_id):
        await callback_query.answer("‚ÑπÔ∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ –º–∞—î –¥–æ—Å—Ç—É–ø.")
        return

    try:
        # –î–æ–¥–∞—î–º–æ –≤ –±–∞–∑—É
        add_user(user_id, user.username, lang)

        # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
        if lang == 'ua':
            text = f"‚úÖ –í–∞–º –Ω–∞–¥–∞–Ω–æ –¥–æ—Å—Ç—É–ø!\n\n–û—Å—å –≤–∞—à–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è:\n{PRIVATE_LINK}"
        else:
            text = f"‚úÖ Access granted!\n\nHere is your link:\n{PRIVATE_LINK}"

        await bot.send_message(user_id, text)

        # –†–µ–¥–∞–≥—É—î–º–æ –∫–Ω–æ–ø–∫—É ‚Äî –∑–∞–º—ñ–Ω—é—î–º–æ —ó—ó –Ω–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—É
        new_markup = InlineKeyboardMarkup().add(
            InlineKeyboardButton("‚úÖ –î–æ—Å—Ç—É–ø –Ω–∞–¥–∞–Ω–æ", callback_data="none")
        )
        await bot.edit_message_reply_markup(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            reply_markup=new_markup
        )

        await callback_query.answer("‚úÖ –î–æ—Å—Ç—É–ø –Ω–∞–¥–∞–Ω–æ!")

    except Exception as e:
        await callback_query.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –¥–æ—Å—Ç—É–ø.")
        print(f"[ERROR] give_access: {e}")


@dp.message_handler(commands=['admin_list'])
async def show_user_list(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.reply("")
        return

    from database import get_all_users
    users = get_all_users()

    if not users:
        await message.reply("‚ùå –ù–µ–º–∞—î –∂–æ–¥–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –¥–æ—Å—Ç—É–ø–æ–º.")
        return

    text = "üìã –°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ –¥–æ—Å—Ç—É–ø–æ–º:\n\n"
    for user_id, username, lang, access_time in users:
        uname = f"@{username}" if username else "–±–µ–∑ —é–∑–µ—Ä–Ω–µ–π–º—É"
        text += f"üßë {uname}\nüÜî {user_id}\nüåê –ú–æ–≤–∞: {lang}\nüóì {access_time}\n\n"

    await message.reply(text)

@dp.callback_query_handler(lambda c: c.data == "none")
async def ignore_callback(callback_query: types.CallbackQuery):
    await callback_query.answer()
    
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
